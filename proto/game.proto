syntax = "proto3";

// 패킷 타입 열거형
enum PacketType {
    UNKNOWN = 0;
    C2S_LOGIN_REQUEST = 1;
    S2C_LOGIN_RESPONSE = 2;
    C2S_GAME_END_REQUEST = 3;
    S2C_GAME_OVER_NOTIFICATION = 4;
    C2S_TOWER_BUY = 5;
    C2S_TOWER_ATTACK = 6;
    S2C_ENEMY_TOWER_SPAWN = 7;
    S2C_ENEMY_TOWER_ATTACK = 8;
    C2S_SPAWN_MONSTER = 9;
    C2S_DIE_MONSTER = 10;
    S2C_ENEMY_SPAWN_MONSTER = 11;
    S2C_ENEMY_DIE_MONSTER = 12;
    C2S_MATCH_REQUEST = 13;
    S2C_MATCH_FOUND_NOTIFICATION = 14;
    C2S_MONSTER_ATTACK_BASE = 15;
    S2C_UPDATE_BASE_HP = 16;
    S2C_GAMESYNC = 17;
}

// 좌표
message Coordinates {
    uint32 x = 1;
    uint32 y = 2;
}

// 실패 코드 열거형
enum GlobalFailCode {
    NONE = 0;
    UNKNOWN_ERROR = 1;
    AUTH_FAILED = 2;
    INVALID_REQUEST = 3;
    SERVER_ERROR = 4;
}

// 패킷 헤더
message PacketHeader {
    uint32 packetType = 1;  // 패킷 타입 (2바이트, ushort 대신 uint32 사용)
    string version = 2;     // 버전 (문자열)
    uint32 sequence = 3;    // 유저의 호출 수 (42억)
    bytes payload = 4;      // 실제 데이터
}

// 몬스터가 기지를 공격
message C2S_MonsterAttackBase {
    string monsterId = 1;
    uint32 damage = 2;
}

// 기지 HP 업데이트
message S2C_UpdateBaseHp {
    uint32 hp = 1;
}

// 요청 패킷: 대결 신청 (클라이언트 → 서버)
message C2S_MatchRequest {
    string userId = 1;  // 유저 아이디
}

// 통지 패킷: 대결 시작 (서버 → 클라이언트)
message S2C_MatchFoundNotification {
    string opponentId = 1;  // 상대방 유저 아이디
    GlobalFailCode failCode = 2;
}

// 요청 패킷 (클라이언트 → 서버)
message C2S_TowerBuy {
    Coordinates position = 1;
}

message C2S_TowerAttack {
    uint32 towerIndex = 1;
    uint32 monsterIndex = 2;
}

// 요청 패킷 (클라이언트 → 서버)
message C2S_LoginRequest {
    string id = 1;
    string password = 2;
}

// 몬스터 생성 좌표
message MonsterSpawnPoint {
    uint32 x = 1;
    uint32 y = 2;
}

// 몬스터 생성 요청 패킷
message C2S_SpawnMonster {
    MonsterSpawnPoint position = 1;
}

// 몬스터 사망 요청 패킷
message C2S_DieMonster {
    uint32 monsterIndex = 1;
}

// 게임 종료 요청 패킷
message C2S_GameEndRequest {
    string userId = 1;  // 유저 아이디
    uint32 finalScore = 2;  // 최종 점수
}

// 응답 패킷 (서버 → 클라이언트)
message S2C_EnemyTowerSpawn {
    Coordinates position = 1;
    GlobalFailCode failCode = 2;
}

message S2C_EnemyTowerAttack {
    uint32 enemyTowerIndex = 1;
    uint32 enemyMonsterIndex = 2;
    GlobalFailCode failCode = 3;
}

// 응답 패킷 (서버 → 클라이언트)
message S2C_LoginResponse {
    bool success = 1;
    string message = 2;
    string token = 3; // 성공 시 발급되는 JWT 토큰
    GlobalFailCode fail_code = 4;
}

// 몬스터 생성 요청 패킷
message S2C_EnemySpawnMonster {
    MonsterSpawnPoint position = 1;
}

// 몬스터 사망 요청 패킷
message S2C_EnemyDieMonster {
    uint32 monsterIndex = 1;
}

// 게임 오버 통지 패킷
message S2C_GameOverNotification {
    bool isWin = 1;  // 승리 여부
    string message = 2;  // 게임 오버 메시지
    GlobalFailCode fail_code = 3;
}

// 상태 동기화 패킷
message S2C_GameSync {
    PlayerData playerData = 1;
    PlayerData opponentData = 2;
}

message PlayerData {
    uint32 userGold = 1;
    uint32 baseHp = 2;
    uint32 score = 3;
    repeated MonsterInfo monsters = 4;
    repeated TowerInfo towers = 5;
}

// 몬스터 정보
message MonsterInfo {
    uint32 x = 1;
    uint32 y = 2;
    uint32 hp = 3;
    uint32 monsterNumber = 4;
}

// 타워 정보
message TowerInfo {
    uint32 x = 1;
    uint32 y = 2;
}

// 게임 패킷 (헤더 + 페이로드)
message GamePacket {
    PacketHeader header = 1;  // 패킷의 헤더
    oneof payload {
        C2S_LoginRequest login_request = 2;
        S2C_LoginResponse login_response = 3;
        C2S_GameEndRequest game_end_request = 4;
        S2C_GameOverNotification game_over_notification = 5;
        C2S_TowerBuy tower_buy = 6;
        C2S_TowerAttack tower_attack = 7;
        S2C_EnemyTowerSpawn enemy_tower_spawn = 8;
        S2C_EnemyTowerAttack enemy_tower_attack = 9;
        C2S_SpawnMonster spawn_monster = 10;
        C2S_DieMonster die_monster = 11;
        S2C_EnemySpawnMonster enemy_spawn_monster = 12;
        S2C_EnemyDieMonster enemy_die_monster = 13;
        C2S_MatchRequest match_request = 14;
        S2C_MatchFoundNotification match_found_notification = 15;
        C2S_MonsterAttackBase monster_attack_base = 16;
        S2C_UpdateBaseHp update_base_hp = 17;
        S2C_GameSync game_sync = 18;
        // 추가 패킷 타입들 여기에 추가하기
    }
}
